// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

/* Required: 16 gates or fewer */
/* Extra credit: 15 gates */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    And(a=instruction[4], b=instruction[15], out=loadd);
    DRegister(load=loadd, in=din, out=x);
    Mux16(a=instruction, b=aluout, out=ain, sel=instruction[15]);
    ARegister(load=loada, in=ain, out=aout, out[0..14]=addressM);
    Not(in=instruction[15], out=notin15);
    Or(a=instruction[5], b=notin15, out=loada);
    Mux16(a=aout, b=inM, out=y, sel=instruction[12]);
    ALU(zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], x=x, y=y, zr=zr, ng=ng, out=outM, out=din, out=aluout);
    PC(reset=reset, inc=true, load=pcload, in=aout, out[0..14]=pc);
    And(a=instruction[3], b=instruction[15], out=writeM);
    And(a=instruction[2], b=ng, out=j1out);
    And(a=instruction[1], b=zr, out=j2out);
    Or(a=zr, b=ng, out=notposout);
    Not(in=notposout, out=posout);
    And(a=instruction[0], b=posout, out=j3out);
    Or(a=j1out, b=j2out, out=j1orj2out);
    Or(a=j1orj2out, b=j3out, out=jumpout);
    And(a=jumpout, b=instruction[15], out=pcload);
}
